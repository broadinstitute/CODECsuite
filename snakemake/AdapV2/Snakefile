import pandas as pd

metadata_file = config["input_meta"]
metadata = pd.read_csv(metadata_file, sep="\t").set_index(["batch","sample"])
nparallel = config['nparallel'] if 'nparallel' in config else 40
tmpdir=config['tmpdir']


batch_ids, sample_names = list(zip(*metadata.index))
batch_ids = set(batch_ids)
sample_names = set(sample_names)
print("batch_ids", batch_ids)
print("sample_names", sample_names)

SPLIT_OUT="split-out"
SPLITS = [str(x+1) for x in range(nparallel)]

REF= config['ref']
CODEC_root = config['codec_root']

DEMUX=f"{CODEC_root}/cmake-build-release/codec demux"
TRIM=f"{CODEC_root}/cmake-build-release/codec trim"
CONSENSUS_BIN=f"{CODEC_root}/cmake-build-release/codec consensus"
ACCU_BIN=f"{CODEC_root}/cmake-build-release/codec accuracy"
AGG_METRICS_SCRIPT=f"{CODEC_root}/snakemake/script/cds_summarize.py"
AGG_LOG_SCRIPT=f"{CODEC_root}/snakemake/script/agg_log.py"
SPLIT_SCRIPT=f"{CODEC_root}/snakemake/script/fastqsplit.pl"
MONOMER_ERROR_SCRIPT = f"{CODEC_root}/snakemake/script/calculate_monomer_error_rate.py"
UPDATE_MET= f"{CODEC_root}/snakemake/script/updatemet"
CODEC2MAF= f"{CODEC_root}/snakemake/script/codec2maf"

JAVA_PARAMS = "-Xmx30g -Djava.io.tmpdir=./tmp"
BWA = "bwa"
PICARD = f"java {JAVA_PARAMS} -jar $PICARD"
GATK = f"{config['gatk4']} --java-options \"{JAVA_PARAMS}\""
GATK3 = f"{config['gatk3']} --java-options \"{JAVA_PARAMS}\""
FGBIO = f"java {JAVA_PARAMS} -jar {config['fgbio']}"

DETECT_DIR="detect"
ACCU_OUT="accu_out"
ADAPTER_TRIM_OUT="adap_trimmed"
TRIM_MAPPED="mapped"
Metrics_OUT="metrics"

workdir: config["cwd"]

batch_to_fastq = metadata.reset_index().groupby('batch').agg({'fastq1' : set, 'fastq2': set})
batch_to_samplesheet = metadata.reset_index().groupby('batch').agg({'sample_sheet' : set})
batch_to_samples = metadata.reset_index().groupby('batch').agg({'sample' : set})
sample_to_batch = metadata.reset_index().groupby('sample').agg({'batch' : set})
sample_to_vcf = metadata.reset_index().groupby('sample').agg({'germline_vcf' : set})
sample_to_germbam = metadata.reset_index().groupby('sample').agg({'germline_bam' : set})
rule SplitFastq1:
    input:
         lambda wildcards: batch_to_fastq.loc[wildcards.id]['fastq1']
    params:
          nsplit = nparallel,
          prefix = "tmp/{id}_split_r1"
    output:
          tmp = temp("tmp/{id}.1.fastq"),
          splitbed = temp(expand("tmp/{{id}}_split_r1.{ss}.fastq", ss = SPLITS)),
    shell:
         """
         zcat {input} > {output.tmp} && {SPLIT_SCRIPT} {output.tmp} {params.prefix} {params.nsplit}
         """

rule SplitFastq2:
    input:
         lambda wildcards: batch_to_fastq.loc[wildcards.id]['fastq2']
    params:
          nsplit = nparallel,
          prefix = "tmp/{id}_split_r2"
    output:
          tmp = temp("tmp/{id}.2.fastq"),
          splitbed = temp(expand("tmp/{{id}}_split_r2.{ss}.fastq", ss = SPLITS)),
    shell:
         """
         zcat {input} > {output.tmp} && {SPLIT_SCRIPT} {output.tmp} {params.prefix} {params.nsplit}
         """

rule DemuxL1:
    input:
         read1 = "tmp/L001_split_r1.{ss}.fastq",
         read2 = "tmp/L001_split_r2.{ss}.fastq",
         sample_sheet = lambda wildcards: batch_to_samplesheet.loc['L001']['sample_sheet']
    output:
         read1 = temp(expand("demux/L001_split.{{ss}}.{index}.1.fastq.gz", index = batch_to_samples.loc['L001']['sample'])),
         read2 = temp(expand("demux/L001_split.{{ss}}.{index}.2.fastq.gz", index = batch_to_samples.loc['L001']['sample'])),
         unmatched1 = temp("demux/L001_split.{ss}.unmatched.1.fastq.gz"),
         unmatched2 = temp("demux/L001_split.{ss}.unmatched.2.fastq.gz"),
         hopped1 = temp("demux/L001_split.{ss}.hopped.1.fastq.gz"),
         hopped2 = temp("demux/L001_split.{ss}.hopped.2.fastq.gz"),
         log = "demux/L001_split.{ss}.log",
    wildcard_constraints:
          ss = "[0-9]+"
    params:
        outprefix = "demux/L001_split.{ss}",
        ref = {REF}
    shell:
        """
            {DEMUX} -1 {input.read1} -2 {input.read2} -p {input.sample_sheet} -o {params.outprefix} -r {params.ref}  > {output.log}
        """

rule DemuxL2:
 input:
      read1 = "tmp/L002_split_r1.{ss}.fastq",
      read2 = "tmp/L002_split_r2.{ss}.fastq",
      sample_sheet = lambda wildcards: batch_to_samplesheet.loc['L002']['sample_sheet']
 output:
      read1 = temp(expand("demux/L002_split.{{ss}}.{index}.1.fastq.gz", index = batch_to_samples.loc['L002']['sample'])),
      read2 = temp(expand("demux/L002_split.{{ss}}.{index}.2.fastq.gz",  index = batch_to_samples.loc['L002']['sample'])),
      unmatched1 = temp("demux/L002_split.{ss}.unmatched.1.fastq.gz"),
      unmatched2 = temp("demux/L002_split.{ss}.unmatched.2.fastq.gz"),
      hopped1 = temp("demux/L002_split.{ss}.hopped.1.fastq.gz"),
      hopped2 = temp("demux/L002_split.{ss}.hopped.2.fastq.gz"),
      log = "demux/L002_split.{ss}.log",
 wildcard_constraints:
       ss = "[0-9]+"
 params:
     outprefix = "demux/L002_split.{ss}",
     ref = {REF}
 shell:
     """
         {DEMUX} -1 {input.read1} -2 {input.read2} -p {input.sample_sheet} -o {params.outprefix} -r {params.ref}  > {output.log}
     """

# rule Output4Demux:
#     input:
#         log = expand("demux/{batch_id}_split.{{ss}}.log", batch_id = batch_ids)
#     output:
#         read1 = expand("demux/{batch_id}_split.{{ss}}.{index}.1.fastq.gz", zip, batch_id = metadata.reset_index()['batch'], index = metadata.reset_index()['sample']),
#         read2 = expand("demux/{batch_id}_split.{{ss}}.{index}.2.fastq.gz", zip, batch_id = metadata.reset_index()['batch'], index = metadata.reset_index()['sample'])

rule Trim:
    input:
        read1 = "demux/{batch_id}_split.{ss}.{index}.1.fastq.gz",
        read2 = "demux/{batch_id}_split.{ss}.{index}.2.fastq.gz",
        log = "demux/{batch_id}_split.{ss}.log",
    output:
        highconf = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.highconf.bam"),
        lowconf = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.lowconf.bam"),
        singleinsert = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.singleinsert.bam"),
        single_lowconf = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.single_lowconf.bam"),
        singleton = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.singleton.bam"),
        trimone = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.trimone.bam"),
        untrimboth = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.untrimboth.bam"),
        lost = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.lost.bam"),
        log = temp("adap_trimmed/{batch_id}_split.{ss}.{index}.trim.log"),
    params:
        adap_type = "custom_primer_v2",
        outprefix = "adap_trimmed/{batch_id}_split.{ss}.{index}",
        rgsm = "{index}"
    resources:
        mem = 8,
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+",
        ss = "[0-9]+"
    shell:
        """
            {TRIM} -1 {input.read1} -2 {input.read2} -o  {params.outprefix} -u 3 -U 3 -f 2 -t 2 -s {params.rgsm} > {output.log} 
        """

rule SortInQueryOrder:
    input:
         "adap_trimmed/{batch_id}_split.{ss}.{index}.{type}.bam",
    output:
          "adap_trimmed/{batch_id}_split.{ss}.{index}.{type}.querysort.bam",
    resources:
        mem = 8,
        runtime = 2,
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+"
    shell:
        """
        {PICARD} SortSam I={input} O={output} SO=queryname TMP_DIR={tmpdir}
        """


rule AlignRawTrimmed:
    input:
         "adap_trimmed/{batch_id}_split.{ss}.{index}.{type}.querysort.bam",
    output:
          fastq1 = temp("tmp/{batch_id}_split.{ss}.{index}.{type}.1.fq"),
          fastq2 = temp("tmp/{batch_id}_split.{ss}.{index}.{type}.2.fq"),
          tmp = temp("tmp/{batch_id}_split.{ss}.{index}.{type}.aligned_tmp.bam"),
          bam = temp("tmp/{batch_id}_split.{ss}.{index}.{type}.aligned.bam"),
          bai = temp("tmp/{batch_id}_split.{ss}.{index}.{type}.aligned.bai")
    params:
          reference = REF,
    resources:
             mem = 8,
             ncores = 1,
             runtime = 4
    wildcard_constraints:
          index = "[0-9a-zA-Z_-]+"
    shell:
         """
         {PICARD} SamToFastq \
             I={input} \
             FASTQ={output.fastq1} \
             TMP_DIR={tmpdir} \
             SECOND_END_FASTQ={output.fastq2} &&
         {BWA} mem \
             -K 100000000 \
             -Y \
             -t {resources.ncores} \
             {params.reference} {output.fastq1} {output.fastq2} > {output.tmp} &&
         {PICARD} MergeBamAlignment \
             ALIGNED={output.tmp} \
             UNMAPPED={input} \
             O={output.bam} \
             R={params.reference} \
             TMP_DIR={tmpdir} \
             CREATE_INDEX=true \
             MAX_RECORDS_IN_RAM=200000
         """


rule MergeSplit:
    input:
         bam = expand("tmp/{{batch_id}}_split.{ss}.{{index}}.highconf.aligned.bam", ss=SPLITS),
         bai = expand("tmp/{{batch_id}}_split.{ss}.{{index}}.highconf.aligned.bai", ss=SPLITS)
    output:
          bam = temp("tmp/{batch_id}.{index}.raw.aligned.bam"),
          bai = temp("tmp/{batch_id}.{index}.raw.aligned.bam.bai")
    resources:
          mem = 4,
          ncores = config['ncores']
    shell:
         """
         samtools merge -@ {resources.ncores} {output.bam} {input.bam} && samtools index {output.bam} -@ {resources.ncores}
         """

rule MergeLogSplit:
    input:
         expand(ADAPTER_TRIM_OUT + "/{{batch_id}}_split.{ss}.{{index}}.trim.log", ss=SPLITS),
    output:
         ADAPTER_TRIM_OUT + "/{batch_id}.{index}.trim.log"
    wildcard_constraints:
          batch_id = "[0-9a-zA-Z_-]+",
          index = "[0-9a-zA-Z_-]+"
    resources:
          mem = 8,
          ncores = 1
    shell:
         """
          {AGG_LOG_SCRIPT} {input} {output}
         """

rule CDSByProduct:
    input:
         trim_log = ADAPTER_TRIM_OUT + "/{batch_id}.{index}.trim.log",
         highconf_bam = "tmp/{batch_id}.{index}.raw.aligned.bam",
         highconf_bai = "tmp/{batch_id}.{index}.raw.aligned.bam.bai"
    output:
          met = Metrics_OUT + "/byproduct/{batch_id}.{index}.byproduct.txt"
    params:
          sid = "{index}"
    wildcard_constraints:
          index = "[0-9a-zA-Z_-]+"
    resources:
        mem = 24,
        runtime = 12,
    shell:
         """
            {AGG_METRICS_SCRIPT} --sample_id {params.sid} --trim_log {input.trim_log} \
            --highconf_bam {input.highconf_bam} > {output.met}
         """

rule MergeRawGroup:
    input:
         lambda wildcard: expand("tmp/{batch_id}.{{index}}.raw.aligned.bam", batch_id = sample_to_batch.loc[wildcard.index]['batch'])
    output:
          bam = temp("tmp/{index}.raw.aligned.bam")
    resources:
             mem = 8,
             ncores = 1,
             runtime = 16,
    wildcard_constraints:
        index = "[0-9a-zA-Z_-]+"
    shell:
         """
         samtools merge -@ {resources.ncores} {output.bam} {input}
         """

rule ReplaceRawReadGroup:
    input:
       "tmp/{index}.raw.aligned.bam"
    output:
       bam = temp("tmp/{index}.raw.replacerg.bam"),
       bai = temp("tmp/{index}.raw.replacerg.bai"),
    params:
        sid = "{index}"
    resources:
        mem = 8,
        runtime = 16,
    shell:
        """
        {PICARD} AddOrReplaceReadGroups \
           I={input} \
           O={output.bam} \
           CREATE_INDEX=true \
           RGID=4 \
           RGLB=lib1 \
           RGPL=ILLUMINA \
           RGPU=unit1 \
           RGSM={params.sid}
        """

rule MarkRawDuplicates:
    input:
        bam = "tmp/{index}.raw.replacerg.bam"
    resources:
        mem = 16,
        runtime = 16,
    output:
        bam = "tmp/{index}.raw.replacerg.markdup.bam",
        met = "metrics/{index}.raw.marked_duplicates.txt"
    shell:
        """
        {PICARD} MarkDuplicates I={input.bam} O={output.bam} M={output.met} CREATE_INDEX=true \
            TAG_DUPLICATE_SET_MEMBERS=true TAGGING_POLICY=All PG=null
        """

rule CollectInsertSizeMetrics:
    input:
         bam = "tmp/{index}.raw.replacerg.markdup.bam",
    output:
          txt = Metrics_OUT + "/{index}.raw.insert_size_metrics.txt",
          hist = Metrics_OUT + "/{index}.raw.insert_size_histogram.pdf"
    shell:
         """
         {PICARD} CollectInsertSizeMetrics I={input.bam} O={output.txt} H={output.hist} M=0.5 W=600 DEVIATIONS=100
         """

rule DuplexConsensus:
    input:
         "tmp/{index}.raw.replacerg.markdup.bam",
    output:
         tmp =  temp("tmp/{index}.consensus.tmp.bam"),
         bam = temp("consensus/{index}.consensus.bam")
    params:
         tmpdir = "tmp"
    resources:
         mem = 8,
         runtime = 32,
         ncores = config['ncores'],
    shell:
         """
         {CONSENSUS_BIN} -b {input} -o {output.tmp} -m 0 -q 0 -p 1 -d {params.tmpdir} -T {resources.ncores} &&
         {PICARD} SortSam I={output.tmp} O={output.bam} SO=queryname TMP_DIR=./tmp
         """

rule AlignConsensus:
    input:
         "consensus/{index}.consensus.bam"
    output:
          fastq1 = temp("tmp/{index}.1.fq"),
          fastq2 = temp("tmp/{index}.2.fq"),
          tmp = temp("tmp/{index}.aligned_tmp.bam"),
          bam = temp("consensus/{index}.cds_consensus.replacerg.bam"),
          bai = temp("consensus/{index}.cds_consensus.replacerg.bai")
    params:
          reference = REF,
    resources:
             mem = 8,
             ncores = config['ncores'],
             runtime = 48
    shell:
         """
         {PICARD} SamToFastq \
             I={input} \
             FASTQ={output.fastq1} \
             SECOND_END_FASTQ={output.fastq2} &&
         {BWA} mem \
             -K 100000000 \
             -Y \
             -t {resources.ncores} \
             {params.reference} {output.fastq1} {output.fastq2} > {output.tmp} &&
         {PICARD} MergeBamAlignment \
             ALIGNED={output.tmp} \
             UNMAPPED={input} \
             O={output.bam} \
             R={params.reference} \
             TMP_DIR={tmpdir} \
             CREATE_INDEX=true \
             MAX_RECORDS_IN_RAM=5000000
         """

rule MarkDuplicates:
    input:
        bam = "consensus/{index}.cds_consensus.replacerg.bam"
    resources:
        mem = 16,
        runtime = 16,
    output:
        bam = "consensus/{index}.cds_consensus.replacerg.markdup.bam",
        met = "metrics/{index}.marked_duplicates.txt"
    shell:
        """
        {PICARD} MarkDuplicates I={input.bam} O={output.bam} M={output.met} CREATE_INDEX=true \
            TAG_DUPLICATE_SET_MEMBERS=true TAGGING_POLICY=All PG=null BARCODE_TAG=RX DUPLEX_UMI=true
        """

rule GroupReadByUMI:
    input:
         "consensus/{index}.cds_consensus.replacerg.bam",
    output:
         bam = "groupbyumi/{index}.cds_consensus.GroupedByUmi.bam",
         histogram = Metrics_OUT + "/{index}.cds_consensus.umiHistogram.txt"
    resources:
             mem = 16,
             runtime = 32
    shell:
         """
         {FGBIO} GroupReadsByUmi \
             -i {input} \
             -o {output.bam} \
             -f {output.histogram} \
             --strategy=edit \
         """

rule CallMolecularConsensusReads:
    input:
         "groupbyumi/{index}.cds_consensus.GroupedByUmi.bam",
    output:
         temp("tmp/{index}.cds_consensus.mol_consensus.bam")
    params:
          rg = "{index}"
    resources:
             mem = 12,
             runtime = 36
    shell:
         """

         {FGBIO} CallMolecularConsensusReads \
             -i {input} \
             -o {output} \
             -p {params.rg} \
             -M 1
         """

rule AlignMolecularConsensusReads:
    input:
         "tmp/{index}.cds_consensus.mol_consensus.bam"
    output:
          fastq1 = temp("tmp/{index}_1.fq"),
          fastq2 = temp("tmp/{index}_2.fq"),
          tmp = temp("tmp/{index}.mol_consensus.aligned_tmp.bam"),
          bam = "consensus/{index}.cds_consensus.mol_consensus.aligned.bam",
          bai = "consensus/{index}.cds_consensus.mol_consensus.aligned.bai"
    params:
          reference = REF,
    resources:
             mem = 8,
             runtime = 96,
             ncores = config['ncores']
    shell:
         """
         {PICARD} SamToFastq \
             I={input} \
             FASTQ={output.fastq1} \
             SECOND_END_FASTQ={output.fastq2} &&

         {BWA} mem \
             -K 100000000 \
             -t {resources.ncores} \
             -Y \
             {params.reference} {output.fastq1} {output.fastq2} > {output.tmp} &&

         {PICARD} MergeBamAlignment \
             ALIGNED={output.tmp} \
             UNMAPPED={input} \
             O={output.bam} \
             CREATE_INDEX=true \
             MAX_RECORDS_IN_RAM=5000000 \
             TMP_DIR={tmpdir} \
             R={params.reference}
         """
