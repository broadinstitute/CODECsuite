include: "../Snakefile"
TRUTH_BCF= config['bcf']
EVAL_REGION_BED= config['region_bed']
EVAL_REGION_IL= config['region_interval_list']
DBSNP= config['dbsnp']

rule all:
    input:
        expand("{method}/{index}.mutant_metrics.txt", index = sample_names, method=['raw_accu', ACCU_OUT]),
        expand(Metrics_OUT + "/{index}.raw.insert_size_metrics.txt",index = sample_names),
        expand(Metrics_OUT + "/byproduct/{batch_id}.{index}.byproduct.txt", zip, batch_id = metadata.reset_index()['batch'], index = metadata.reset_index()['sample']),
        expand(Metrics_OUT + "/{index}.{type}.wgs_metrics.txt",index = sample_names, type=['raw'])

rule CollectRawWgsMetrics:
    input:
         bam = "tmp/{index}.raw.replacerg.markdup.bam",
    output:
          metrics = Metrics_OUT + "/{index}.raw.wgs_metrics.txt",
    params:
          ref = REF,
          itl = EVAL_REGION_IL
    shell:
         """
         {PICARD} CollectWgsMetrics I={input.bam} O={output.metrics} R={params.ref} INTERVALS={params.itl} \
         INCLUDE_BQ_HISTOGRAM=true
         """

rule CollectWgsMetrics:
    input:
         bam = "consensus/{index}.replacerg.markdup.bam",
    output:
          metrics = Metrics_OUT + "/{index}.wgs_metrics.txt",
    params:
          ref = REF,
          itl = EVAL_REGION_IL
    shell:
         """
         {PICARD} CollectWgsMetrics I={input.bam} O={output.metrics} R={params.ref} INTERVALS={params.itl} \
         INCLUDE_BQ_HISTOGRAM=true
         """

rule CollectFinalWgsMetrics:
    input:
         bam = "consensus/{index}.mol_consensus.aligned.bam",
    output:
          metrics = Metrics_OUT + "/{index}.mol_consensus.wgs_metrics.txt",
    params:
          ref = REF,
          itl = EVAL_REGION_IL
    shell:
         """
         {PICARD} CollectWgsMetrics I={input.bam} O={output.metrics} R={params.ref} INTERVALS={params.itl} INCLUDE_BQ_HISTOGRAM=true MINIMUM_BASE_QUALITY=30
         """
#
rule CDSErrorMetrics:
    input:
         bam = "consensus/{index}.mol_consensus.aligned.bam",
    output:
          accu = ACCU_OUT + "/{index}.mutant_metrics.txt",
          called = ACCU_OUT + "/{index}.variants_called.txt",
          context = ACCU_OUT + "/{index}.context_count.txt",
    params:
          ref = REF,
          high_conf_region = EVAL_REGION_BED,
          dbsnp = DBSNP,
          germ_bam = lambda wildcards : sample_to_germbam.loc[wildcards.index]['germline_bam'],
    resources:
             mem = 16,
             runtime = 96
    shell:
         """
            {CALL_BIN}  -b {input.bam} \
                -L {params.high_conf_region} \
                -r {params.ref} \
                -n {params.germ_bam} \
                -m 60 \
                -q 30 \
                -d 12 \
                -V {params.dbsnp} \
                -x 10 \
                -c 6 \
                -5 \
                -g 30 \
                -G 250 \
                -Q 0.7 \
                -B 0.6 \
                -N 0.1 \
                -Y 5 \
                -W 1 \
                -a {output.accu} \
                -e {output.called} \
                -C {output.context}
         """

rule RawCDSErrorMetrics:
    input:
         bam = "tmp/{index}.raw.replacerg.markdup.bam"
    output:
          accu = "raw_accu/{index}.mutant_metrics.txt",
          called = "raw_accu/{index}.variants_called.txt",
          context = "raw_accu/{index}.context_count.txt",
    params:
          ref = REF,
          high_conf_region = EVAL_REGION_BED,
          dbsnp = DBSNP,
          germ_bam = lambda wildcards : sample_to_germbam.loc[wildcards.index]['germline_bam'],
    resources:
             mem = 16,
             runtime = 96
    shell:
         """
            {CALL_BIN}  -b {input.bam} \
                -L {params.high_conf_region} \
                -r {params.ref} \
                -n {params.germ_bam} \
                -m 60 \
                -q 30 \
                -d 12 \
                -V {params.dbsnp} \
                -x 5 \
                -c 3 \
                -5 \
                -g 30 \
                -G 250 \
                -Q 0.5 \
                -B 0.5 \
                -N 0.1 \
                -Y 5 \
                -W 1 \
                --min_passQ_frac_TT 0.6 \
                -a {output.accu} \
                -e {output.called} \
                -C {output.context}
         """